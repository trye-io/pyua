function openDetailsById(id) {
  const detailsElement = document.getElementById(id);
  if (detailsElement) {
    detailsElement.open = true;
    detailsElement.scrollIntoView({ behavior: 'smooth' });
  }
}

window.addEventListener('DOMContentLoaded', function() {
    const radioButtons = document.getElementsByName('create');
    const submitButton = document.getElementById('check-btn');

    radioButtons.forEach(function(radioButton) {
      radioButton.addEventListener('change', function() {
        submitButton.disabled = false;
      });
    });
});

function checkAnswer(button_name, radio_name) {
    
  const radioButtons = document.getElementsByName(radio_name);
  let hasTrueValue = true;
  
  for (var i = radioButtons.length - 1; i >= 0; i--) {
    const radioButton = radioButtons[i];
    const text = radioButton.value === 'true' ? '‚úÖ' : '‚ùå';
    const textElement = document.createElement('span');
    textElement.textContent = text;
    textElement.style.width = '20px';
    radioButton.parentNode.replaceChild(textElement, radioButton);
    
    if ((radioButton.checked && radioButton.value != 'true') || (!radioButton.checked && radioButton.value != 'false')) {
      hasTrueValue = false;
    }
    
  }
  
  var success_messages = [
      "–¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏, —á–µ–º–ø—ñ–æ–Ω üåü",
      "–ü—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä ü§©",
      "–¢–∏ -- –º–æ–ª–æ–¥–µ—Ü üòé",
      "–ô–æ–π, –±–∞—á—É –¥–æ–≤—ñ–¥—á–µ–Ω–æ–≥–æ –∫–æ–¥–µ—Ä–∞ ü§ì",
      "–ê —Ç–∏ —Ç–æ—á–Ω–æ –Ω–µ –ø—Ä—Ü—é–≤–∞–≤ –≤ OpenAI –¥–æ —Ü—å–æ–≥–æ ü§ñ"
  ];
  
  var failure_messages = [
      "–£–ø—Å, —â–µ —Ç—Ä–æ—à–∫–∏ üò¨",
      "–¶–µ –Ω–µ –∑–æ–≤—Å—ñ–º —Ç–µ, —â–æ –º–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ, –∞–ª–µ –≤–∂–µ –±–ª–∏–∑—å–∫–æ üôä",
      "–¢–∏ —â–µ –Ω–∞ –æ–¥–∏–Ω –∫—Ä–æ–∫ –±–ª–∏–∂—á–µ –¥–æ —É—Å–ø—ñ—Ö—É, —Ç—ñ–ª—å–∫–∏ –Ω–µ –∑–¥–∞–≤–∞–π—Å—è üöÄ",
      "–ù—ñ—á–æ–≥–æ, –≥–æ–ª–æ–≤–Ω–µ –Ω–µ –∑–¥–∞–≤–∞—Ç–∏—Å—è üí™"
  ];
  
  const button = document.getElementById(button_name);
  const message = document.createElement('div');
  
  if (hasTrueValue) {
    
    message.textContent = success_messages[Math.floor(Math.random() * success_messages.length)];
    message.className = 'success';

  } else {
    message.textContent = failure_messages[Math.floor(Math.random() * failure_messages.length)];
    message.className = 'failure';
  }
  
  button.parentNode.replaceChild(message, button);
  
}
