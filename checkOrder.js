function checkArraysOrder(arr1, arr2) {
  if (arr1.length !== arr2.length) return false;
  for (let i = 0; i < arr1.length; i++) {
    if (arr1[i] !== arr2[i]) return false;
  }
  return true;
}

function checkOrder(button_name, containerID, orderedIDs) {
    
  const container = document.getElementById(containerID);
  const currentOrder = Array.from(container.children).map(box => box.id);
  
  var success_messages = [
      "–¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏, —á–µ–º–ø—ñ–æ–Ω üåü",
      "–ü—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä ü§©",
      "–¢–∏ -- –º–æ–ª–æ–¥–µ—Ü üòé",
      "–ô–æ–π, –±–∞—á—É –¥–æ–≤—ñ–¥—á–µ–Ω–æ–≥–æ –∫–æ–¥–µ—Ä–∞ ü§ì",
      "–ê —Ç–∏ —Ç–æ—á–Ω–æ –Ω–µ –ø—Ä—Ü—é–≤–∞–≤ –≤ OpenAI –¥–æ —Ü—å–æ–≥–æ ü§ñ"
  ];
  
  var failure_messages = [
      "–£–ø—Å, —â–µ —Ç—Ä–æ—à–∫–∏ üò¨",
      "–¶–µ –Ω–µ –∑–æ–≤—Å—ñ–º —Ç–µ, —â–æ –º–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ, –∞–ª–µ –≤–∂–µ –±–ª–∏–∑—å–∫–æ üôä",
      "–¢–∏ —â–µ –Ω–∞ –æ–¥–∏–Ω –∫—Ä–æ–∫ –±–ª–∏–∂—á–µ –¥–æ —É—Å–ø—ñ—Ö—É, —Ç—ñ–ª—å–∫–∏ –Ω–µ –∑–¥–∞–≤–∞–π—Å—è üöÄ",
      "–ù—ñ—á–æ–≥–æ, –≥–æ–ª–æ–≤–Ω–µ –Ω–µ –∑–¥–∞–≤–∞—Ç–∏—Å—è üí™"
  ];
  
  const button = document.getElementById(button_name);
  const message = document.createElement('div');
  
  if (checkArraysOrder(currentOrder, orderedIDs)) {
    
    message.textContent = success_messages[Math.floor(Math.random() * success_messages.length)];
    message.className = 'success';

  } else {
    message.textContent = failure_messages[Math.floor(Math.random() * failure_messages.length)];
    message.className = 'failure';
  }
  
  button.parentNode.replaceChild(message, button);
  
}